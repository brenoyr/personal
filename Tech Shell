// Breno Yamada Riquieri
// CSC345 Tech Shell

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
char str[100];
enum {NOT_FOUND=0,FOUND};
static char *ptr;
int OUT = 0;
int count = 0;

char *mystrtok(char* string)
{
  int j,flag=NOT_FOUND;
  char *p; // temp pointer to store the current substring

  if(string != NULL)   // not end of input
    {
      ptr=string;
      p=string;
    }
  else   // no more input 
    {
      if(*ptr == '\0')
	return NULL;
 
      p=ptr;
    }
 
  while(*ptr != '\0')  // while not last character or end of input
    {
      if(*ptr == ' ' || *ptr == '\t')   // more delimiters  
            {
	      if(ptr == p)  // if this is the beginning of the scanning process
                {           // then rolling the current substring p and ptr to next
		  p++;
		  ptr++;
                }
	      else          // if p != p, that means we got a token
                {

		  *ptr='\0';
		  ptr++;
 
		  return p;
                }
            } 
      ptr++;   // in cases, no space, we got a char which is part of the substring, then move ptr to the next char.
    }
  return p;
}
 
int main()
{
  int i;
  int j;
  char *p_str,*token,*nextToken;
  char cwd[128];
  char *tok[32];
  char file[32];
  
  printf("\n Enter a string to tokenize: ");
  scanf("%[^\n]",str);
  
     
  /* simple tokenizing */
  for (i = 1, p_str = str; ; i++, p_str = NULL)
    {
      token = mystrtok(p_str);
      if (token == NULL)
      {
	tok[i-1] = NULL;
	break;
      }
      if (strcmp(">", token) == 0)
	{
	  OUT = i;
	  char cmd1[32];
	  for (j = 0; j < i;j++)
	  {
		  cmd1 += mystrtok(j) + " ";
	  }
	  
	  
	  
	  strcpy(file, tok[i+1]);
	  tok[i] = NULL;
	  printf("\n%s %d", file, i+1);
	  //tok[i] = NULL;
	}
      printf("\n%d: %s",i,token);
      tok[i-1] = token;
      count++;
    }
  if(tok[0] != NULL)
  {
      if (strcmp(tok[0], "pwd") == 0)
	{
	  if (getcwd(cwd, sizeof(cwd)) == NULL)
	    perror("getcwd() error");
	  else
	    printf("\ncurrent working directory is: %s\n", cwd);
	}
      else if (strcmp(tok[0], "cd") == 0)
	{
	  if (chdir(tok[1]) != 0)
	    perror("chdir() error()");

	  getcwd(cwd, sizeof(cwd));
	  printf("\ncurrent working directory is: %s\n", cwd);
	}
      else if (strcmp(tok[0], "exit") == 0)
	{
	  printf("\nexiting...\n");
	  _exit(0);
	}
	  else if (strcmp(tok[0], "set") == 0)
	  {
		  printf("\ncurrent variables:\n");
		  printenv()
	  }
      else
	{
	  // non built-in command
	  pid_t pid;

	  // fork another process
	  pid = fork();
	  if (pid < 0)
	    {
	      // error:
	      fprintf(stderr, "Fork failed");
	      perror("tech_shell.c");
	      exit(-1);
	    }
	  else if (pid == 0)
	    {
	      if (OUT != 0)
		{
		  //char filename = tok[count-2];
		  //tok[OUT-1] = NULL;
		  printf("%s\n", file);
		  FILE *fp;
		  fp = freopen(file, "w+", stdout);
		}

	      
	      // child
	      printf("\nChild process...\n");
	      execvp(tok[0], tok);
	      
	      fprintf(stderr, "Child process could not do execvp.\n");
	      //exit(1);
	    }
	  else
	    {
	      // parent; wait child to be completed
	      wait(NULL);
	      printf("\nChild Complete\n");
	      //exit(0);
	    }
	}
    }
  printf("\n");
}
